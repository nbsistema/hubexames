import { supabase, UserProfile, AppUser } from './supabase';

export interface AuthUser {
  id: string;
  email: string;
  name: string;
  profile: UserProfile;
}

export const authService = {
  async signIn(email: string, password: string): Promise<{ user: AuthUser | null; error: string | null }> {
    try {
      console.log('üîê Tentando fazer login com:', email.trim().toLowerCase());
      
      // Validar entrada
      if (!email || !password) {
        return { user: null, error: 'Email e senha s√£o obrigat√≥rios' };
      }
      
      const normalizedEmail = email.trim().toLowerCase();
      
      // Validar formato do email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(normalizedEmail)) {
        return { user: null, error: 'Formato de email inv√°lido' };
      }
      
      // Aguardar um pouco antes de tentar login (para casos de usu√°rio rec√©m-criado)
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
        email: normalizedEmail,
        password,
      });

      if (authError) {
        console.error('‚ùå Erro de autentica√ß√£o:', authError.message);
        console.error('‚ùå C√≥digo do erro:', authError.status);
        console.error('‚ùå Detalhes completos:', authError);
        
        // Mapear erros espec√≠ficos do Supabase para mensagens mais claras
        let errorMessage = 'Erro de autentica√ß√£o';
        if (authError.message?.includes('Invalid login credentials') || authError.message?.includes('invalid_credentials')) {
          errorMessage = 'Email ou senha incorretos. Se voc√™ acabou de criar o usu√°rio, aguarde alguns segundos e tente novamente.';
        } else if (authError.message?.includes('Email not confirmed')) {
          errorMessage = 'Email n√£o confirmado. Verifique sua caixa de entrada ou aguarde alguns minutos.';
        } else if (authError.message?.includes('Too many requests')) {
          errorMessage = 'Muitas tentativas. Tente novamente em alguns minutos';
        } else if (authError.status === 400) {
          errorMessage = 'Dados de login inv√°lidos. Verifique email e senha.';
        } else if (authError.status === 500) {
          errorMessage = 'Erro interno do servidor. Tente novamente';
        } else {
          errorMessage = authError.message || 'Erro desconhecido';
        }
        
        return { user: null, error: errorMessage };
      }

      if (!authData.user) {
        console.error('‚ùå Usu√°rio n√£o encontrado ap√≥s login');
        return { user: null, error: 'Usu√°rio n√£o encontrado' };
      }

      console.log('‚úÖ Login realizado com sucesso, buscando dados do usu√°rio...');

      // Aguardar um pouco antes de buscar dados do usu√°rio
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Buscar dados do usu√°rio na tabela users
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('*')
        .eq('id', authData.user.id)
        .single();

      if (userError) {
        console.error('‚ùå Erro ao buscar dados do usu√°rio:', userError);
        console.error('‚ùå C√≥digo do erro:', userError.code);
        console.error('‚ùå Detalhes:', userError.details);
        
        // Se o usu√°rio n√£o existe na tabela users, mas existe na auth
        if (userError.code === 'PGRST116') {
          // Tentar criar o perfil automaticamente para admin
          console.log('‚ÑπÔ∏è Perfil n√£o encontrado, tentando criar automaticamente...');
          try {
            const { error: createError } = await supabase
              .from('users')
              .insert({
                id: authData.user.id,
                email: normalizedEmail,
                name: authData.user.user_metadata?.name || 'Administrador',
                profile: 'admin',
              });
              
            if (!createError) {
              console.log('‚úÖ Perfil criado automaticamente');
              return {
                user: {
                  id: authData.user.id,
                  email: normalizedEmail,
                  name: authData.user.user_metadata?.name || 'Administrador',
                  profile: 'admin',
                },
                error: null,
              };
            }
          } catch (createError) {
            console.warn('‚ö†Ô∏è N√£o foi poss√≠vel criar perfil automaticamente');
          }
          
          return { user: null, error: 'Perfil de usu√°rio n√£o encontrado. As tabelas podem n√£o ter sido criadas ainda.' };
        }
        
        return { user: null, error: 'Erro ao buscar dados do usu√°rio' };
      }

      if (!userData) {
        console.error('‚ùå Dados do usu√°rio n√£o encontrados');
        return { user: null, error: 'Dados do usu√°rio n√£o encontrados' };
      }

      console.log('‚úÖ Dados do usu√°rio encontrados:', userData);

      return {
        user: {
          id: userData.id,
          email: userData.email,
          name: userData.name,
          profile: userData.profile,
        },
        error: null,
      };
    } catch (error) {
      console.error('‚ùå Erro interno no login:', error);
      return { user: null, error: 'Erro interno do sistema' };
    }
  },

  async signOut(): Promise<void> {
    try {
      console.log('üö™ Fazendo logout...');
      await supabase.auth.signOut();
      console.log('‚úÖ Logout realizado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro no logout:', error);
    }
  },

  async getCurrentUser(): Promise<AuthUser | null> {
    try {
      console.log('üë§ Verificando usu√°rio atual...');
      
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError) {
        if (authError.message === 'Auth session missing!') {
          console.info('‚ÑπÔ∏è Nenhuma sess√£o ativa encontrada');
        } else {
          console.error('‚ùå Erro ao verificar usu√°rio:', authError);
        }
        return null;
      }
      
      if (!user) {
        console.log('‚ÑπÔ∏è Nenhum usu√°rio logado');
        return null;
      }

      console.log('‚úÖ Usu√°rio autenticado encontrado, buscando dados...');

      try {
        const { data: userData, error: userError } = await supabase
          .from('users')
          .select('*')
          .eq('id', user.id)
          .single();

        if (userError) {
          // Tratar erro 409 (Conflict) especificamente
          if (userError.code === '409' || userError.message?.includes('409')) {
            console.warn('‚ö†Ô∏è Conflito detectado, aguardando sincroniza√ß√£o...');
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // Tentar novamente ap√≥s aguardar
            const { data: retryData, error: retryError } = await supabase
              .from('users')
              .select('*')
              .eq('id', user.id)
              .single();
              
            if (retryError) {
              console.warn('‚ö†Ô∏è Ainda h√° conflito ap√≥s retry:', retryError);
              return null;
            }
            
            userData = retryData;
          }
          // Se a tabela n√£o existe ou h√° problemas de estrutura, n√£o logar como erro cr√≠tico
          else if (userError.code === '42P01' || userError.code === '42P17') {
            console.warn('‚ö†Ô∏è Tabela users n√£o existe ainda. Isso √© normal na primeira execu√ß√£o.');
            return null;
          } else if (userError.code === 'PGRST116') {
            console.info('‚ÑπÔ∏è Perfil n√£o encontrado para usu√°rio logado');
            return null;
          } else {
            console.error('‚ùå Erro ao buscar dados do usu√°rio:', userError);
            return null;
          }
        }
        
        if (!userData) {
          console.info('‚ÑπÔ∏è Dados do usu√°rio n√£o encontrados');
          return null;
        }
      } catch (tableError) {
        console.warn('‚ö†Ô∏è Tabela users ainda n√£o est√° dispon√≠vel. Isso √© normal na primeira execu√ß√£o.');
        return null;
      }

      console.log('‚úÖ Dados do usu√°rio carregados:', userData);

      return {
        id: userData.id,
        email: userData.email,
        name: userData.name,
        profile: userData.profile,
      };
    } catch (error) {
      console.error('‚ùå Erro interno ao verificar usu√°rio:', error);
      return null;
    }
  },

  async resetPassword(email: string): Promise<{ error: string | null }> {
    try {
      console.log('üîÑ Enviando email de reset para:', email);
      
      const redirectUrl = window.location.origin + '/reset-password';
      
      const { error } = await supabase.auth.resetPasswordForEmail(email.trim().toLowerCase(), {
        redirectTo: redirectUrl,
      });

      if (error) {
        console.error('‚ùå Erro ao enviar email de reset:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Email de reset enviado com sucesso');
      return { error: null };
    } catch (error) {
      console.error('‚ùå Erro interno no reset de senha:', error);
      return { error: 'Erro interno do sistema' };
    }
  },

  async createUser(email: string, name: string, profile: UserProfile): Promise<{ error: string | null }> {
    try {
      console.log('üë• Criando usu√°rio:', { email, name, profile });
      
      // Normalizar email
      const normalizedEmail = email.trim().toLowerCase();
      
      // Primeiro, criar o usu√°rio na autentica√ß√£o
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: normalizedEmail,
        password: 'nb@123',
        options: {
          emailRedirectTo: `${window.location.origin}/reset-password`,
          data: {
            name: name,
            profile: profile
          },
          // Desabilitar confirma√ß√£o de email
          emailRedirectTo: undefined
        }
      });

      if (authError) {
        console.error('‚ùå Erro ao criar usu√°rio na auth:', authError);
        
        let errorMessage = 'Erro ao criar usu√°rio';
        if (authError.message.includes('User already registered')) {
          errorMessage = 'Este email j√° est√° cadastrado no sistema';
        } else {
          errorMessage = authError.message;
        }
        
        return { error: errorMessage };
      }

      if (!authData.user) {
        console.error('‚ùå Usu√°rio n√£o foi criado');
        return { error: 'Erro ao criar usu√°rio' };
      }

      console.log('‚úÖ Usu√°rio criado na auth, criando perfil...');

      // Aguardar para garantir que o usu√°rio foi criado
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Criar perfil do usu√°rio na tabela users
      const { error: profileError } = await supabase
        .from('users')
        .insert({
          id: authData.user.id,
          email: normalizedEmail,
          name,
          profile,
        });

      if (profileError) {
        console.error('‚ùå Erro ao criar perfil:', profileError);
        
        // Se o perfil j√° existe, tentar atualizar
        if (profileError.code === '23505') { // Unique violation
          console.log('‚ÑπÔ∏è Perfil j√° existe, tentando atualizar...');
          const { error: updateError } = await supabase
            .from('users')
            .update({
              email: normalizedEmail,
              name,
              profile,
            })
            .eq('id', authData.user.id);
            
          if (updateError) {
            console.error('‚ùå Erro ao atualizar perfil:', updateError);
            return { error: 'Erro ao criar perfil do usu√°rio' };
          }
        } else {
          return { error: 'Erro ao criar perfil do usu√°rio' };
        }
      }

      console.log('‚úÖ Usu√°rio criado com sucesso');
      return { error: null };
    } catch (error) {
      console.error('‚ùå Erro interno na cria√ß√£o do usu√°rio:', error);
      return { error: 'Erro interno do sistema' };
    }
  },

  async createFirstAdmin(email: string, name: string, password: string): Promise<{ error: string | null }> {
    try {
      console.log('üëë Criando primeiro administrador:', { email, name });
      
      // Normalizar email
      const normalizedEmail = email.trim().toLowerCase();
      
      // Validar entrada
      if (!normalizedEmail || !name.trim() || !password) {
        return { error: 'Todos os campos s√£o obrigat√≥rios' };
      }
      
      // Validar formato do email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(normalizedEmail)) {
        return { error: 'Formato de email inv√°lido' };
      }
      
      // Validar senha
      if (password.length < 6) {
        return { error: 'A senha deve ter pelo menos 6 caracteres' };
      }
      
      console.log('‚ÑπÔ∏è Prosseguindo com cria√ß√£o do admin (primeira execu√ß√£o)');

      // Primeiro, verificar se o usu√°rio j√° existe
      try {
        const { data: existingUser } = await supabase.auth.signInWithPassword({
          email: normalizedEmail,
          password: password
        });
        
        if (existingUser.user) {
          console.log('‚ÑπÔ∏è Usu√°rio j√° existe e pode fazer login');
          return { error: null };
        }
      } catch (error) {
        console.log('‚ÑπÔ∏è Usu√°rio n√£o existe ainda, prosseguindo com cria√ß√£o');
      }

      // Criar usu√°rio com signUp e confirma√ß√£o autom√°tica
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: normalizedEmail,
        password,
        options: {
          emailRedirectTo: undefined, // Desabilitar redirecionamento
          data: {
            name: name,
            profile: 'admin'
          },
          // Tentar confirmar automaticamente
          captchaToken: undefined
        }
      });

      if (authError) {
        console.error('‚ùå Erro ao criar admin na auth:', authError);
        console.error('‚ùå C√≥digo do erro:', authError.status);
        console.error('‚ùå Detalhes completos:', authError);
        
        let errorMessage = 'Erro ao criar administrador';
        if (authError.message?.includes('User already registered') || authError.message?.includes('already_registered')) {
          // Se j√° existe, tentar fazer login para verificar se funciona
          console.log('‚ÑπÔ∏è Usu√°rio j√° existe, verificando se pode fazer login...');
          try {
            const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
              email: normalizedEmail,
              password: password
            });
            
            if (loginData.user && !loginError) {
              console.log('‚úÖ Usu√°rio j√° existe e pode fazer login');
              return { error: null };
            } else {
              return { error: 'Usu√°rio j√° existe mas n√£o consegue fazer login. Verifique a senha.' };
            }
          } catch (loginError) {
            return { error: 'Usu√°rio j√° existe mas h√° problema com as credenciais' };
          }
        } else if (authError.message?.includes('Password should be at least')) {
          errorMessage = 'A senha deve ter pelo menos 6 caracteres';
        } else if (authError.status === 400) {
          errorMessage = 'Dados inv√°lidos para cria√ß√£o do usu√°rio';
        } else if (authError.status === 500) {
          errorMessage = 'Erro interno do servidor. Tente novamente';
        } else {
          errorMessage = authError.message || 'Erro desconhecido';
        }
        
        return { error: errorMessage };
      }

      if (!authData.user) {
        console.error('‚ùå Admin n√£o foi criado');
        return { error: 'Erro ao criar administrador' };
      }

      console.log('‚úÖ Admin criado na auth, criando perfil...');

      // Aguardar mais tempo para garantir que o usu√°rio foi criado
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Tentar criar perfil manualmente (a tabela pode n√£o existir ainda)
      try {
        const { error: profileError } = await supabase
          .from('users')
          .insert({
            id: authData.user.id,
            email: normalizedEmail,
            name,
            profile: 'admin',
          });

        if (profileError) {
          console.warn('‚ö†Ô∏è N√£o foi poss√≠vel criar perfil na tabela users:', profileError.message);
          console.log('‚ÑπÔ∏è Isso √© normal se as tabelas ainda n√£o foram criadas');
        } else {
          console.log('‚úÖ Perfil criado na tabela users');
        }
      } catch (tableError) {
        console.warn('‚ö†Ô∏è Tabela users n√£o existe ainda, mas o usu√°rio foi criado na auth');
      }

      // Verificar se o usu√°rio pode fazer login imediatamente
      console.log('üîç Testando login imediato...');
      try {
        const { data: testLogin, error: testError } = await supabase.auth.signInWithPassword({
          email: normalizedEmail,
          password: password
        });
        
        if (testLogin.user && !testError) {
          console.log('‚úÖ Login teste bem-sucedido');
          // Fazer logout do teste
          await supabase.auth.signOut();
        } else {
          console.warn('‚ö†Ô∏è Login teste falhou:', testError?.message);
        }
      } catch (testError) {
        console.warn('‚ö†Ô∏è N√£o foi poss√≠vel testar login:', testError);
      }
      console.log('‚úÖ Primeiro administrador criado com sucesso');
      return { error: null };
    } catch (error) {
      console.error('‚ùå Erro interno na cria√ß√£o do admin:', error);
      return { error: 'Erro interno do sistema' };
    }
  },
};